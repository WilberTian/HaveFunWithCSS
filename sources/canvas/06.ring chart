<!DOCTYPE html>
<html lang="en">
<head>
  <style>
 	
        
  </style>
</head>
<body>
  
  <canvas id="myCanvas" width="600px" height="300px" style="border:1px solid #000000;">
  </canvas>

  <script>
    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");
    var height = canvas.height;
    var width = canvas.width;
	var radius = 120;
    var innerRadius = 90;
    
    
    var data = [
        {name:'2012', value:1141},
        {name:'2013', value:1499},
        {name:'2014', value:2260},
        {name:'2015', value:1170},
        {name:'2016', value:970},
        {name:'2017', value:1450}
    ];
    
    var colors = ['#1E9FFF', '#13CE66', '#F7BA2A', '#FF4949', '#72f6ff', '#e1e1e1'];
    
    
    function drawPieChart() {
      	var start = 0, end = 0, sum = 0;
        var middle;
      
		data.forEach(function(item){
        	sum += item.value;
        });	
      
      	for (var i = 0; i < data.length; i++) {
          	start = i === 0 ? -Math.PI / 2 : end;
            end = start + data[i].value * 2 * Math.PI / sum;
          	
          	
          
            ctx.beginPath();
            ctx.moveTo(300, 150);
            ctx.arc(300, 150, radius, start, end);
        	ctx.fillStyle = colors[i];
            ctx.closePath()
        	ctx.fill();
          	
          
          	middle = (start + end) / 2;
            var x = width / 2;
          	var y = height /2;
          	x1 = Math.ceil(Math.abs(radius * Math.cos(middle)));
            y1 = Math.floor(Math.abs(radius * Math.sin(middle)));
          
          	ctx.strokeStyle = colors[i];
            // 绘制各个扇形边上的数据
            if (middle <= 0) {
                ctx.textAlign = 'left';
                ctx.moveTo(x + x1, y - y1);
                ctx.lineTo(x + x1 + 10, y - y1 - 10);
                ctx.moveTo(x + x1 + 10, y - y1 - 10);
                ctx.lineTo(x + x1 + radius / 2, y - y1 - 10);
                ctx.stroke();
                ctx.fillText(data[i].value, x + x1 + 5 + radius / 2, y - y1 - 5);
            } else if (middle > 0 && middle <= Math.PI / 2) {
                ctx.textAlign = 'left';
                ctx.moveTo(x + x1, y + y1);
                ctx.lineTo(x + x1 + 10, y + y1 + 10);
                ctx.moveTo(x + x1 + 10, y + y1 + 10);
                ctx.lineTo(x + x1 + radius / 2, y + y1 + 10);
                ctx.stroke();
                ctx.fillText(data[i].value, x + x1 + 5 + radius / 2, y + y1 + 15);
            } else if (middle > Math.PI / 2 && middle < Math.PI) {
                ctx.textAlign = 'right';
                ctx.moveTo(x - x1, y + y1);
                ctx.lineTo(x - x1 - 10, y + y1 + 10);
                ctx.moveTo(x - x1 - 10, y + y1 + 10);
                ctx.lineTo(x - x1 - radius / 2, y + y1 + 10);
                ctx.stroke();
                ctx.fillText(data[i].value, x - x1 - 5 - radius / 2, y + y1 + 15);
            } else {
                ctx.textAlign = 'right';
                ctx.moveTo(x - x1, y - y1);
                ctx.lineTo(x - x1 - 10, y - y1 - 10);
                ctx.moveTo(x - x1 - 10, y - y1 - 10);
                ctx.lineTo(x - x1 - radius / 2, y - y1 - 10);
                ctx.stroke();
                ctx.fillText(data[i].value, x - x1 - 5 - radius / 2, y - y1 - 5);
            }
          
        }
      	
      	// draw the inner blocker
      	ctx.beginPath();
        ctx.moveTo(300, 150);
        ctx.arc(300, 150, innerRadius, 0, 2 * Math.PI);
        ctx.fillStyle = '#fff';
        ctx.closePath()
        ctx.fill();
  
    }
    
    drawPieChart();
  </script>
</body>
</html>
